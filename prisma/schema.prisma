generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

model User {
  id        String   @id @default(cuid())
  firstName      String
  lastName      String
  username      String @unique
  email     String  @unique
  password  String
  phoneNumber  String
  orders   Order[]
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String
  role     Role @default(CUSTOMER)
  isVerified Boolean @default(false)
  isBlocked  Boolean @default(false)
  isActive  Boolean @default(false)
  carts Cart[]
}


model Product {
  id               String          @id @default(cuid())
  name             String
  shortDescription String
  longDescription  String
  price            Float
  stock            Int
  image            Json            // ðŸ‘ˆ Changed from imageUrl: String
  subImages        Json            // ðŸ‘ˆ New field for additional images
  categoryId       String
  category         Category        @relation(fields: [categoryId], references: [id])
  sizes            Size[]          @relation("ProductSizes")
  isFeatured       Boolean         @default(false)
  orders           Order[]         @relation("OrderToProduct")
  carts            Cart[]
  newCollectionId  String?
  newCollection    NewCollection?  @relation(fields: [newCollectionId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Size {
  id         String   @id @default(cuid())
  name       String
  symbol     String
  fullName   String
  products   Product[]  @relation("ProductSizes")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  description String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  products  Product[] @relation("OrderToProduct")
  total     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  products  Product[]
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewCollection {
  id        String   @id @default(cuid())
  name      String
  description String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
